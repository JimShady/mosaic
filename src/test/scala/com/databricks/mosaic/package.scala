package com.databricks

import org.apache.spark.sql.types.StringType

package object mosaic {
  object mocks {

    import org.apache.spark.sql.types.{StructField, StructType}
    import org.apache.spark.sql.{DataFrame, Row, SparkSession}

    val hex_rows = List(
      List("00000000030000000100000005403E0000000000004024000000000000404400000000000040440000000000004034000000000000404400000000000040240000000000004034000000000000403E0000000000004024000000000000"),
      List("0106000020620D00000100000001030000000100000004000000000000000000000000000000000000000000000000000000000000000000F03F0000000000000040000000000000004000000000000000000000000000000000")
    )

    val wkt_rows = List(
      List("POLYGON ((30 10, 40 40, 20 40, 10 20, 30 10))"),
      List("MULTIPOLYGON (((0 0, 0 1, 2 2, 0 0)))"),
      List("""POLYGON ((10 10, 110 10, 110 110, 10 110, 10 10),
          |(20 20, 20 30, 30 30, 30 20, 20 20), 
          |(40 20, 40 30, 50 30, 50 20, 40 20))""".stripMargin),
      List("""MULTIPOLYGON (((40 60, 20 45, 45 30, 40 60)),
          |((20 35, 10 30, 10 10, 30 5, 45 20, 20 35),
          |(30 20, 20 15, 20 25, 30 20)))""".stripMargin)
    )

    val wkt_rows_boroughs = List(
      List("POLYGON ((-73.7433326819638921 40.7388830992603985, -73.7437139888894251 40.7394032488948525, -73.7440155883505781 40.7407748661890210, -73.7499027983064650 40.7397660065436895, -73.7514517303028754 40.7402341513596795, -73.7534931436411227 40.7423878817946772, -73.7484426826701736 40.7433414452265339, -73.7457349867485306 40.7429503781368751, -73.7447645572185877 40.7433316862888120, -73.7464795803781499 40.7468463207216089, -73.7437632921849939 40.7475585906716375, -73.7441027238367610 40.7481863340343153, -73.7456631440826982 40.7515780164934043, -73.7460203083420396 40.7526644103624847, -73.7475059433906921 40.7561384089298997, -73.7504626791590567 40.7593922093765286, -73.7524216045020893 40.7600876090127926, -73.7534776328631523 40.7588130243055105, -73.7564507049811766 40.7588915767399058, -73.7579784666999245 40.7586649336612936, -73.7597774230309255 40.7578476406518675, -73.7606719303619229 40.7569937242137001, -73.7607268443749433 40.7559019923299672, -73.7601500600110001 40.7550493069326762, -73.7606661687627252 40.7548748677083807, -73.7614213585374898 40.7557447401175921, -73.7613109712959840 40.7569624717956671, -73.7616629882570862 40.7581497156257058, -73.7609327945658180 40.7590315370508662, -73.7596247050563960 40.7592198242993931, -73.7588654466414368 40.7599420439581479, -73.7580538753354915 40.7601269448370971, -73.7579223460616475 40.7604249738937270, -73.7583978580822617 40.7620084949657482, -73.7569924246160440 40.7622746205692295, -73.7500250134239934 40.7637489926651782, -73.7492870519646999 40.7630876909040154, -73.7462167073649368 40.7642256499076510, -73.7449603503156368 40.7621534123618545, -73.7444216818426099 40.7604909608152965, -73.7426837874691472 40.7587853704986856, -73.7408405198126644 40.7560089046367438, -73.7392920808643311 40.7570547567895574, -73.7391620778007280 40.7562952062720782, -73.7397603039244984 40.7554447937863742, -73.7409832571666470 40.7548727104215160, -73.7413307390569059 40.7545925764364227, -73.7418468418436817 40.7534650599401758, -73.7413480742687710 40.7524692490958031, -73.7409132119359754 40.7519838138741903, -73.7398945907203256 40.7513378510539752, -73.7382982358692658 40.7492218807730779, -73.7373691337662081 40.7483450331937860, -73.7367232256816436 40.7479174775296684, -73.7358776472692625 40.7475273848981132, -73.7354179904088767 40.7471420011437004, -73.7351583251506213 40.7465564344430788, -73.7350435381085703 40.7461150344244842, -73.7350506640354695 40.7448748495469459, -73.7347560460864315 40.7441178513729767, -73.7337456012040064 40.7428385758763270, -73.7332075020618731 40.7417961908928703, -73.7337938214375583 40.7389875325014827, -73.7384772699255535 40.7381168525342190, -73.7401553662552516 40.7385312242947180, -73.7412865288292636 40.7388136410812791, -73.7430322642033786 40.7384417601234929, -73.7433326819638921 40.7388830992603985))"),
      List("POLYGON ((-73.7433326819638921 40.7388830992603985, -73.7437139888894251 40.7394032488948525, -73.7440155883505781 40.7407748661890210, -73.7499027983064650 40.7397660065436895, -73.7514517303028754 40.7402341513596795, -73.7534931436411227 40.7423878817946772, -73.7484426826701736 40.7433414452265339, -73.7457349867485306 40.7429503781368751, -73.7447645572185877 40.7433316862888120, -73.7464795803781499 40.7468463207216089, -73.7437632921849939 40.7475585906716375, -73.7441027238367610 40.7481863340343153, -73.7456631440826982 40.7515780164934043, -73.7460203083420396 40.7526644103624847, -73.7475059433906921 40.7561384089298997, -73.7504626791590567 40.7593922093765286, -73.7524216045020893 40.7600876090127926, -73.7534776328631523 40.7588130243055105, -73.7564507049811766 40.7588915767399058, -73.7579784666999245 40.7586649336612936, -73.7597774230309255 40.7578476406518675, -73.7606719303619229 40.7569937242137001, -73.7607268443749433 40.7559019923299672, -73.7601500600110001 40.7550493069326762, -73.7606661687627252 40.7548748677083807, -73.7614213585374898 40.7557447401175921, -73.7613109712959840 40.7569624717956671, -73.7616629882570862 40.7581497156257058, -73.7609327945658180 40.7590315370508662, -73.7596247050563960 40.7592198242993931, -73.7588654466414368 40.7599420439581479, -73.7580538753354915 40.7601269448370971, -73.7579223460616475 40.7604249738937270, -73.7583978580822617 40.7620084949657482, -73.7569924246160440 40.7622746205692295, -73.7500250134239934 40.7637489926651782, -73.7492870519646999 40.7630876909040154, -73.7462167073649368 40.7642256499076510, -73.7449603503156368 40.7621534123618545, -73.7444216818426099 40.7604909608152965, -73.7426837874691472 40.7587853704986856, -73.7408405198126644 40.7560089046367438, -73.7392920808643311 40.7570547567895574, -73.7391620778007280 40.7562952062720782, -73.7397603039244984 40.7554447937863742, -73.7409832571666470 40.7548727104215160, -73.7413307390569059 40.7545925764364227, -73.7418468418436817 40.7534650599401758, -73.7413480742687710 40.7524692490958031, -73.7409132119359754 40.7519838138741903, -73.7398945907203256 40.7513378510539752, -73.7382982358692658 40.7492218807730779, -73.7373691337662081 40.7483450331937860, -73.7367232256816436 40.7479174775296684, -73.7358776472692625 40.7475273848981132, -73.7354179904088767 40.7471420011437004, -73.7351583251506213 40.7465564344430788, -73.7350435381085703 40.7461150344244842, -73.7350506640354695 40.7448748495469459, -73.7347560460864315 40.7441178513729767, -73.7337456012040064 40.7428385758763270, -73.7332075020618731 40.7417961908928703, -73.7337938214375583 40.7389875325014827, -73.7384772699255535 40.7381168525342190, -73.7401553662552516 40.7385312242947180, -73.7412865288292636 40.7388136410812791, -73.7430322642033786 40.7384417601234929, -73.7433326819638921 40.7388830992603985))"),
      List("POLYGON ((-74.1597481587429570 40.6414165257901772, -74.1599787569963098 40.6414464808363576, -74.1603665567036785 40.6415795387926551, -74.1611124252219156 40.6418354537373574, -74.1611789710470646 40.6420066123307677, -74.1613480397163300 40.6435009886979728, -74.1614598592411625 40.6442914295759721, -74.1614603600531836 40.6442949697649141, -74.1579875954066665 40.6438617889660350, -74.1574334920100711 40.6433028577790125, -74.1575530521179331 40.6432482917784057, -74.1579158940678411 40.6430826944529571, -74.1581345160336980 40.6426325306630645, -74.1582754371735149 40.6425633838383860, -74.1584034767242173 40.6425416038819449, -74.1584849583912842 40.6425384668857674, -74.1585504377056566 40.6424975013064795, -74.1585761059831157 40.6424293511026207, -74.1586612596052674 40.6423051054572042, -74.1587437814761898 40.6420038398483285, -74.1588109374531115 40.6417586347403272, -74.1592002453457866 40.6416504039773514, -74.1594560243820524 40.6414483333241208, -74.1597481587429570 40.6414165257901772))"),
    )

    def getHexRowsDf: DataFrame = {
      val spark = SparkSession.builder().getOrCreate()
      val rows = hex_rows.map { x => Row(x: _*) }
      val rdd = spark.sparkContext.makeRDD(rows)
      val schema = StructType(
        List(
          StructField("hex", StringType)
        )
      )
      val df = spark.createDataFrame(rdd, schema)
      df
    }

    def getWKTRowsDf: DataFrame = {
      val spark = SparkSession.builder().getOrCreate()
      val rows = wkt_rows.map { x => Row(x: _*) }
      val rdd = spark.sparkContext.makeRDD(rows)
      val schema = StructType(
        List(
          StructField("wkt", StringType)
        )
      )
      val df = spark.createDataFrame(rdd, schema)
      df
    }

    def getBoroughs: DataFrame = {
      val spark = SparkSession.builder().getOrCreate()
      val rows = wkt_rows_boroughs.map { x => Row(x: _*) }
      val rdd = spark.sparkContext.makeRDD(rows)
      val schema = StructType(
        List(
          StructField("wkt", StringType)
        )
      )
      val df = spark.createDataFrame(rdd, schema)
      df
    }
  }
}
